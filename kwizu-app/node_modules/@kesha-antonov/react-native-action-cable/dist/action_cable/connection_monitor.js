var APP_STATE_ACTIVE,AppState,ConnectionMonitor;({AppState:AppState}=require("react-native")),APP_STATE_ACTIVE="active";export default ConnectionMonitor=function(){var t,n,i;class e{constructor(t,n){this.start=this.start.bind(this),this.stop=this.stop.bind(this),this.isRunning=this.isRunning.bind(this),this.recordPing=this.recordPing.bind(this),this.recordConnect=this.recordConnect.bind(this),this.recordDisconnect=this.recordDisconnect.bind(this),this.startPolling=this.startPolling.bind(this),this.stopPolling=this.stopPolling.bind(this),this.poll=this.poll.bind(this),this.getPollInterval=this.getPollInterval.bind(this),this.reconnectIfStale=this.reconnectIfStale.bind(this),this.connectionIsStale=this.connectionIsStale.bind(this),this.disconnectedRecently=this.disconnectedRecently.bind(this),this.visibilityDidChange=this.visibilityDidChange.bind(this),this.connection=t,this.log=n,this.reconnectAttempts=0}start(){if(!this.isRunning())return this.startedAt=n(),delete this.stoppedAt,this.startPolling(),AppState.addEventListener("change",this.visibilityDidChange),this.log(`ConnectionMonitor started. pollInterval = ${this.getPollInterval()} ms`)}stop(){if(this.isRunning())return this.stoppedAt=n(),this.stopPolling(),AppState.removeEventListener("change",this.visibilityDidChange),this.log("ConnectionMonitor stopped")}isRunning(){return null!=this.startedAt&&null==this.stoppedAt}recordPing(){return this.pingedAt=n()}recordConnect(){return this.reconnectAttempts=0,this.recordPing(),delete this.disconnectedAt,this.log("ConnectionMonitor recorded connect")}recordDisconnect(){return this.disconnectedAt=n(),this.log("ConnectionMonitor recorded disconnect")}startPolling(){return this.stopPolling(),this.poll()}stopPolling(){return clearTimeout(this.pollTimeout)}poll(){return this.pollTimeout=setTimeout(()=>(this.reconnectIfStale(),this.poll()),this.getPollInterval())}getPollInterval(){var n,i,e;return({min:e,max:i}=this.constructor.pollInterval),n=5*Math.log(this.reconnectAttempts+1),Math.round(1e3*t(n,e,i))}reconnectIfStale(){if(this.connectionIsStale())return this.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, pollInterval = ${this.getPollInterval()} ms, time disconnected = ${i(this.disconnectedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`),this.reconnectAttempts++,this.disconnectedRecently()?this.log("ConnectionMonitor skipping reopening recent disconnect"):(this.log("ConnectionMonitor reopening"),this.connection.reopen())}connectionIsStale(){var t;return i(null!=(t=this.pingedAt)?t:this.startedAt)>this.constructor.staleThreshold}disconnectedRecently(){return this.disconnectedAt&&i(this.disconnectedAt)<this.constructor.staleThreshold}visibilityDidChange(){if(AppState.currentState===APP_STATE_ACTIVE)return setTimeout(()=>{if(this.connectionIsStale()||!this.connection.isOpen())return this.log(`ConnectionMonitor reopening stale connection on change. visbilityState = ${AppState.currentState}`),this.connection.reopen()},200)}}return e.pollInterval={min:3,max:30},e.staleThreshold=6,n=function(){return(new Date).getTime()},i=function(t){return(n()-t)/1e3},t=function(t,n,i){return Math.max(n,Math.min(i,t))},e}.call(this);